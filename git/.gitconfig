[core]
	excludesfile = ~/.gitignore

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[alias]
	# Go to a branch
	cd = checkout
	
	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	
	# My log
	l = log --pretty=format:'%C(yellow)%h%Creset%C(auto)%d%Creset %s %Cgreen(%an)' --abbrev-commit
	
	# View the current working tree status using the short format
	s = status -s
	
	# Pull in remote changes for the current repository and all its submodules
	p = pull --recurse-submodules
	
	# Force push, but checking if it is synced with remote
	pursh = push --force-with-lease
	
	# List aliases
	aliases = config --get-regexp alias
	
	# Completely reset current state
	nah = !git reset --hard && git clean -df
	
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	
	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
	
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	
	# Remove branches that have already been merged with main
	
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	
	# Undo last commit, but keep changes
	undo = reset --soft HEAD^
	
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD --no-edit

[pull]
	rebase = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
